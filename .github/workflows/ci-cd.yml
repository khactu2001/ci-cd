name: Test cicd

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      # - name: Set up Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '20'
      #     # working-directory:
      # - name: Install Dependencies
      #   run: yarn -i

      # - name: List all items
      #   run: ls -R android/

      # - name: Set up JDK 11
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '11'
      #     distribution: 'temurin'
      # - name: Build with Gradle
      #   uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      #   with:
      #     arguments: build
      # - name: Download and Extract Android SDK
      #   run: |
      #     wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O android-sdk.zip
      #     unzip -q android-sdk.zip -d android-sdk
      #     export ANDROID_HOME=$PWD/android-sdk
      # - name: Accept Android Licenses
      #   run: yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
      # - name: Set up Android SDK Path
      #   run: echo "export PATH=\$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin" >> $GITHUB_ENV
      # - name: Build APK
      #   run: |
      #     # npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res
      #     cd android
      #     # ./gradlew clean
      #     ./gradlew assembleRelease
      #     # npx react-native run-android --variant=release
      #   # env:
      #   #   CI: true

      - name: Save APK as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: android/app/build/outputs/apk/release/app-release.apk

  download:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download AAB
        uses: actions/download-artifact@v2
        with:
          name: app-release

      - name: Copy AAB to Output Directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/output
          ls -R android/
          echo ${{ github.workspace }}
          ls -R ${{ github.workspace }}
          # cp ${{ github.workspace }}/app-release/*.apk $GITHUB_WORKSPACE/output/
          cp ${{ github.workspace }}/app-release/*.apk $GITHUB_WORKSPACE/output/
